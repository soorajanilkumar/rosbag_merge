#!/bin/bash
# script to merge multiple rosbags which are numbered in sequential order.
# requires python script bagmerge.py in the folder
## Inputs
# start_id is the starting index of the rosbag
# end_id is the ending index of the rosbag
## Output
# Final output is stored in merge_final.bag
#
# Note:  Change the name of the starting of the rosbag in the script accordingly before execution
echo "enter the start index of the rosbags to merge"
read start_id
echo "enter the end index of the rosbags to merge"
read end_id
echo "enter the base_name for the rosbags"
read base_name
echo "name of the output file"
read output_filename
#base_name='magni_carto_peptest'
# counter=$start_id

# if [ $start_id -lt $end_id ]
# then
# 	echo "merging rosbags $start_id to $end_id"
# 	python bagmerge.py -o merge_$counter.bag $base_name*_$counter.bag $base_name*_$((counter+1)).bag
# 	((counter++))
# else
# 	echo "error: start_id not less than end_id"
# 	exit 1
# fi

# arg1 - start_id
merge_funtn(){
	local start_id_local=$1 	#starting index
	local end_id_local=$2 		#ending index
 	local output_filename_local=$3 	#temp output file name
	local counter=$start_id_local

	#merge first 2 rosbags to create a merge_counter.bag
	if [ $start_id_local -lt $end_id_local ]
	then
		echo -e "\n******  merging rosbags $start_id_local to $end_id_local ********\n"
		python bagmerge.py -o merge_$counter.bag $base_name*_$counter.bag $base_name*_$((counter+1)).bag
		((counter++))
	else
		echo "error: start_id not less than end_id"
		exit 1
	fi

	while [ $counter -lt $end_id ]
	do
		python bagmerge.py -o merge_$counter.bag merge_$((counter-1)).bag $base_name*_$((counter+1)).bag
		rm merge_$((counter-1)).bag
		((counter++))
	done

	mv merge_$((counter-1)).bag $output_filename_local.bag
}

# while [ $counter -lt $end_id ]
# do
# 	python bagmerge.py -o merge_$counter.bag merge_$((counter-1)).bag $base_name*_$((counter+1)).bag
# 	rm merge_$((counter-1)).bag
# 	((counter++))
# done

if [ $((end_id - start_id + 1)) -lt 4]
then
	merge_funtn $start_id $end_id $output_filename
else
	mid_id=$(( (end_id-start_id)/2 ))
	merge_funtn $start_id $mid_id tempbag1 &
	merge_funtn $((mid_id+1)) $end_id tempbag2 &

	wait
	python bagmerge.py -o $output_filename.bag tempbag1.bag tempbag2.bag
	rm tempbag1.bag tempbag2.bag

fi

# mv merge_$((counter-1)).bag $output_filename.bag
echo "hope it works"
